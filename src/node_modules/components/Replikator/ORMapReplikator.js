import React, { Component, cloneElement, Children } from "react"
import replikativ, {
  createUUID,
  createStage,
  clientPeer,
  ORMap,
  newMemStore,
  connect
} from "replikativ";

const {createORMap, streamIntoIdentity} = ORMap;

function wrapEvalFunctions(evalFns, component) {
  let wrappedFunctions = {};
  const keys = Object.keys(evalFns);

  keys.map(function(key) {
    if ((typeof evalFns[key]) === "function") {
      const evalFunction = evalFns[key];
      wrappedFunctions[key] = function(supervisor, old, params) {
        const result = evalFunction(supervisor, old, params);
        component.setState({atom: result});
        return result;
      }
  }
          });

  return wrappedFunctions;
}

function logError(err) {
  console.error(err);
}

function createReplica(atom, userId, ormapId, uri, evalFns) {
  const ormapUUID = createUUID(ormapId); // map to correct UUIDs, check for error handling
  let replica = {
    atom,
    ormapId: ormapUUID,
    userId,
    uri
  };
  // initialize local memory store
  newMemStore().then(function(store) {
    replica.store = store;
    // initialize client peer
    return clientPeer(store);
  }, logError).then(function(peer) {
    replica.peer = peer;
    // create local stage
    return createStage(userId, peer);
  }, logError).then(function(stage) {
    replica.stage = stage;
    // initialize local streaming
    replica.stream = ORMap.streamIntoIdentity(stage, userId, ormapUUID, evalFns, replica.atom)
    // create OR Map 
    return createORMap(stage, {id: ormapUUID, description: "transactions"})
  }, logError).then(function () {
    return connect(replica.stage, uri);
  }, logError).then((result) => {
    console.info("Replica initialized!");
  }, logError);
  return replica;
}

class ORMapReplikator extends Component {
  constructor(props) {
    super(props);

    const {
      userId,
      crdtId,
      uri,
      evalFunctions,
      atom
    } = props;

    const wrappedEvalFunctions = wrapEvalFunctions(evalFunctions, this);

    const replica = createReplica(atom, userId, crdtId, uri, wrappedEvalFunctions);

    this.state = { replica };
  }
  render() {
    return cloneElement(Children.only(this.props.children), {atom: this.state.atom, replica: this.state.replica});
  }
}

export default ORMapReplikator
