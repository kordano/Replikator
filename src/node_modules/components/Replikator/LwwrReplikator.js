import React, { Component, cloneElement, Children } from "react"
import replikativ, {
  createUUID,
  createStage,
  clientPeer,
  LWWR,
  newMemStore,
  connect
} from "replikativ";

const {createLWWR, streamIntoIdentity} = LWWR;

function logError(err) {
  console.error(err);
}

function createReplica(atom, userId, lwwrId, uri) {
  const lwwrUUID = createUUID(lwwrId); // map to correct UUIDs, check for error handling
  let replica = {
    atom,
    lwwrId: lwwrUUID,
    userId,
    uri
  };
  // initialize local memory store
  newMemStore().then(function(store) {
    replica.store = store;
    // initialize client peer
    return clientPeer(store);
  }, logError).then(function(peer) {
    replica.peer = peer;
    // create local stage
    return createStage(userId, peer);
  }, logError).then(function(stage) {
    replica.stage = stage;
    // initialize local streaming
    replica.stream = streamIntoIdentity(stage, userId, lwwrUUID, replica.atom)
    // create LWWR
    return createLWWR(stage, {id: lwwrUUID, description: "click counter"})
  }, logError).then(function () {
    // connect stage to server
    return connect(replica.stage, uri);
  }, logError).then((result) => {
    console.info("Replica initialized!");
  }, logError);
  return replica;
}

class LwwrReplikator extends Component {
  constructor(props) {
    super(props);
    const {userId, crdtId, uri, atom} = props;
    const replica = createReplica(atom, userId, crdtId, uri);
    this.state = { replica };
  }
  render() {
    return cloneElement(Children.only(this.props.children), {atom: this.state.atom, replica: this.state.replica});
  }
}

export default LwwrReplikator
